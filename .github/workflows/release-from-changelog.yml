# .github/workflows/release-from-changelog.yml
name: Release from CHANGELOG

on:
  push:
    branches: [main]
    paths:
      - "CHANGELOG.md"
      - "package.json"

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # we may create a tag

      - name: Read version from package.json
        id: ver
        run: echo "value=v$(node -p "require('./package.json').version")" >> "$GITHUB_OUTPUT"

      - name: Extract notes for this version from CHANGELOG.md
        id: notes
        shell: bash
        run: |
          VER="${{ steps.ver.outputs.value }}"       # e.g. v1.2.3
          RAW="${VER#v}"                             # 1.2.3
          # Match either "## [1.2.3]" or "## 1.2.3"
          awk -v rx="^##[[:space:]]*(\\[?$RAW\\]?)([[:space:]]|$)" '
            BEGIN{ capture=0 }
            $0 ~ rx { if (found++) exit; capture=1; next }
            /^##[[:space:]]/ { if (capture) exit }
            { if (capture) print }
          ' CHANGELOG.md > _changelog_section.md

          if [ ! -s _changelog_section.md ]; then
            echo "Could not find a CHANGELOG section for $VER" >&2
            echo "ðŸ’¡ Ensure you have a header like: ## [$RAW] - YYYY-MM-DD (or ## $RAW)" >&2
            exit 1
          fi

          # Pass as multi-line output
          {
            echo "text<<EOF"
            cat _changelog_section.md
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Ensure tag exists (create lightweight tag if missing)
        uses: actions/github-script@v7
        id: ensure_tag
        with:
          script: |
            const tag = core.getInput('tag');
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            // Try to get the ref
            try {
              await github.rest.git.getRef({ owner, repo, ref: `tags/${tag}` });
              core.info(`Tag ${tag} already exists`);
            } catch (e) {
              core.info(`Tag ${tag} not found; creating at HEAD of ${process.env.GITHUB_SHA}`);
              await github.rest.git.createRef({
                owner, repo,
                ref: `refs/tags/${tag}`,
                sha: process.env.GITHUB_SHA
              });
            }
          inputs: |
            tag: ${{ steps.ver.outputs.value }}

      - name: Create or update GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const tag = `${{ steps.ver.outputs.value }}`;
            const body = `${{ steps.notes.outputs.text }}`;
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');

            // See if a release for this tag already exists
            let release;
            try {
              release = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
              core.info(`Updating existing release ${release.data.id}`);
              await github.rest.repos.updateRelease({
                owner, repo,
                release_id: release.data.id,
                tag_name: tag,
                name: tag,
                body
              });
            } catch (e) {
              core.info(`Creating new release for ${tag}`);
              await github.rest.repos.createRelease({
                owner, repo,
                tag_name: tag,
                name: tag,
                body,
                draft: false,
                prerelease: false
              });
            }
